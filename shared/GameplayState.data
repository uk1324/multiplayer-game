`
#include <vector>
#include <unordered_map>
#include <shared/Time.hpp>

using PlayerIndex = u32;
#define NETWORK_SERIALIZE_PLAYER_INDEX(stream, value) serialize_uint32(stream, value)

#include <shared/BulletIndex.hpp>

struct PatternInfo {
	const char* name;
	float cooldown;
};

namespace PatternType {
	enum PatternType {
		SINLGE_BULLET,
		EXPANDING_TRIANGLE_STAR_PATTERN,
		SPINNING_PATTERN,
		COUNT
	};
};

static constexpr PatternInfo patternInfos[] {
	{ "single bullet", 0.4f },
	{ "expanding triangle star pattern", 3.0f },
	{ "spinning pattern", 5.0f },
};

struct PlayerPatternCooldowns {
	float of[PatternType::COUNT];
};
`

struct [[NetworkSerialize, Json]] GameplayPlayer {
	Vec2 position;
	PlayerPatternCooldowns [[NoNetworkSerialize, NoJsonSerialize]] cooldown;
}

struct ClientBulletSynchronizationData {
	`#ifdef CLIENT`
	float timeToSynchronize = `0.0f`;
	float synchronizationProgressT = `1.0f`;
	// Istead of using the server spawn frame could do something like storing negative elapsed time. Or maybe just storing the server frame inside the elapsed. The issues with just stroing negative elapsed time is that it isn't synchronized with the rest of the world although that could technically be handled.
	FrameTime frameToActivateAt = `0`;
	float timeToCatchUp = `0.0f`;
	float catchUpPercentPerFrame = `0.0f`;
	`#endif`
}

struct [[NetworkSerialize, Bullet, Json]] MoveForwardBullet {
	Vec2 position;
	Vec2 velocity;
	float elapsed = `0.0f`;
	ClientBulletSynchronizationData [[NoNetworkSerialize, NoJsonSerialize]] synchronization;
}

struct [[NetworkSerialize, Bullet, Json]] SlashPatternSpawner {
	Vec2 position;
	float directionAngle;
	float elapsed = `0.0f`;
	ranged_int<`0`, `INT32_MAX`> bulletsSpawned = `0`;
	ClientBulletSynchronizationData [[NoNetworkSerialize, NoJsonSerialize]] synchronization;
}

struct [[NetworkSerialize, Bullet, Json]] SpinningPatternSpawner {
	PlayerIndex [[NoJsonSerialize]] ownerPlayerIndex;
	FrameTime [[NoJsonSerialize]] elapsed = `0`;
	ranged_int<`0`, `INT32_MAX`> bulletsSpawned = `0`;
	ClientBulletSynchronizationData [[NoNetworkSerialize, NoJsonSerialize]] synchronization;
}

struct [[NetworkSerialize, Json]] GameplayState {
	map<MoveForwardBulletIndex, MoveForwardBullet> moveForwardBullets;
	map<SlashPatternSpawnerIndex, SlashPatternSpawner> slashPatternSpawners;
	map<SpinningPatternSpawnerIndex, SpinningPatternSpawner> spinningPatternSpawners;

	i32 [[NoNetworkSerialize]] bulletsSpawnedThisFrame = `0`;
}