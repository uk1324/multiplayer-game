`
#include <shared/GameplayStateData.hpp>
#include <limits.h>
#include <vector>

static const int MAX_CLIENTS = 4;

`

struct [[NetworkSerialize]] LeaderboardEntry {
    ranged_int<`0`, `INT32_MAX`> kills = `0`;
    ranged_int<`0`, `INT32_MAX`> deaths = `0`;
}

struct [[NetworkSerialize]] JoinMessagePlayer {
    PlayerIndex playerIndex;
    bool isAlive;
    LeaderboardEntry leaderboard;
}

struct
[[NetworkSerialize, NetworkMessage]]
JoinMessage {
    PlayerIndex clientPlayerIndex;
    vector<JoinMessagePlayer> players;
}

struct [[NetworkSerialize]] WorldUpdateMessagePlayer {
    PlayerIndex playerIndex;
    Vec2 position;
}

struct [[NetworkSerialize, NetworkMessage]] WorldUpdateMessage {
    FrameTime serverSequenceNumber;
    FrameTime lastExecutedInputClientSequenceNumber;
    FrameTime lastReceivedInputClientSequenceNumber;

    GameplayState gemeplayState;
    vector<WorldUpdateMessagePlayer> players;
}

struct [[NetworkSerialize]] LeaderboardUpdateEntry {
    PlayerIndex playerIndex;
    LeaderboardEntry entry;
}

struct [[NetworkSerialize, NetworkMessage]] LeaderboardUpdateMessage {
    vector<LeaderboardUpdateEntry> entries;
}

struct [[NetworkSerialize, NetworkMessage]] SpawnPlayerMessage {
    PlayerIndex playerIndex;
    Vec2 position;
}

struct [[NetworkSerialize, NetworkMessage]] SpawnRequestMessage {}

struct [[NetworkSerialize, NetworkMessage]] PlayerJoinedMessage {
    JoinMessagePlayer player;
}

struct [[NetworkSerialize, NetworkMessage]] PlayerDisconnectedMessage {
    PlayerIndex playerIndex;
}