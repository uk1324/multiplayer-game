import "shared.stg"

dataFile(hppPath, dataFile) ::= <<
#include "<hppPath>"
<includePaths(dataFile.cppIncludePaths)>

<dataFile.declarations : { declaration | <declaration(declaration)> } >
>>

declaration(declaration) ::= <%
<if(declaration.isStruct)>
    <struct(declaration)>
<elseif(declaration.isEnum)>
    <enum(declaration)>
<elseif(declaration.isCpp)>

<elseif(declaration.isShader)>
    <shader(declaration)>
<else>
    declaration error
<endif>
%>

struct(struct) ::= <<
<if(struct.isGui)>
void gui(<struct.name>& value) {
    using namespace Gui;
    ImGui::PushID(&value);

    <struct.fields : { field | <gui(field.dataType, fieldAccess("value", field.name), field.displayName)>} >
    ImGui::PopID();
}
<endif>

<if(struct.isJson)>
Json::Value toJson(const <struct.name>& value) {
    auto json = Json::Value::emptyObject();

    <struct.fields : { field | <toJson(field.dataType, field.name)>} >
    return json;
}

template\<\>
<struct.name> fromJson\<<struct.name>\>(const Json::Value& json) {
    return <struct.name> {
        <struct.fields : { field
            | .<field.name> = <if(field.hasDefaultValue)>!json.contains("<field.name>") ? <field.defaultValue> : <endif><fromJson(field.dataType, jsonAccess("json", field.name))>};
            separator=",\n"
        >
    };
}
<endif>

<if(struct.isUniform)>
void shaderSetUniforms(ShaderProgram& shader, const <struct.name>& value) {
    <struct.fields : { field | shader.set("<field.name>", value.<field.name>); } >
}
<endif>
>>

gui(dataType, name, displayedName) ::= <<
<\\>
<if(dataType.isRangedFloat)><\\>
sliderFloat("<displayedName>", <name>, <dataType.min>, <dataType.max>);
<elseif(dataType.isFloat)><\\>
inputFloat("<displayedName>", <name>);
<elseif(dataType.isBool)><\\>
checkbox("<displayedName>", <name>);
<elseif(dataType.isColor)><\\>
inputColor("<displayedName>", <name>);
<elseif(dataType.isVec2)><\\>
inputVec2("<displayedName>", <name>);
<elseif(dataType.isVec3)><\\>
inputVec3("<displayedName>", <name>);
<elseif(dataType.isIdentifier)><\\>
if (node("<displayedName>")) {
    gui(<name>);
    nodeEnd();
}
<else><\\>
/* <name> */
<endif>
>>

toJson(dataType, name) ::= <<
<if(dataType.isFloat || dataType.isBool)><\\>
json["<name>"] = Json::Value(value.<name>);
<else><\\>
json["<name>"] = toJson(value.<name>);
<endif>
>>

fromJson(dataType, name) ::= <<
<if(dataType.isFloat)><\\>
<name>.number()<\\>
<elseif(dataType.isI32)><\\>
<name>.intNumber()<\\>
<elseif(dataType.isBool)><\\>
<name>.boolean()<\\>
<else><\\>
fromJson\<<dataType.name>\>(<name>)<\\>
<endif>
>>

enum(enum) ::= <<
<if(enum.isToStr)>
const char* toStr(<enum.name> value) {
    switch (value) {
        <enum.definitions : { definition | case <enum.name>::<definition.name>: return "<definition.name>"; }; separator="\n">
    }
}
<if(enum.isImGuiCombo)>
void combo(<enum.name>* value) {
    switch (value) {
        <enum.definitions : { definition | case <enum.name>::<definition.name>: return "<definition.name>"; }; separator="\n">
    }
}
<endif>
<endif>
>>

shader(shader) ::= <<
<struct(shader.instance)>
<struct(shader.fragUniforms)>
<struct(shader.vertUniforms)>

void <shader.name>Instances::addInstanceAttributesToVao() {
    using Vec1 = float;
    <shader.vertexAttributes : { attribute | <if(attribute.isPerInstance)><setVaoAttribute(attribute.nameWithoutPrefix, attribute.field.dataType, attribute.layout, shader.instance.name)><endif> }; separator="\n">
}

void <shader.name>Instances::drawCall(Vbo& instanceBuffer, usize instanceBufferSizeBytes, int indicesCount) {
    const auto maxInstancesPerDrawCall = instanceBufferSizeBytes / sizeof(<shader.name>Instance);
    auto drawn = 0;
    instanceBuffer.bind();
    <! Can't just put leftToDraw here and check in the while loop if > 0 because the subtraction would underflow. Have to do the check in the while loop and calculate leftToDraw after. !>
    while (drawn \< toDraw.size()) {
        const auto leftToDraw = toDraw.size() - drawn;
        const auto toDrawInThisDrawCall = (leftToDraw > maxInstancesPerDrawCall) ? maxInstancesPerDrawCall : leftToDraw;
        Vbo::setData(0, toDraw.data() + drawn, toDrawInThisDrawCall * sizeof(<shader.name>Instance));
        glDrawElementsInstanced(GL_TRIANGLES, indicesCount, GL_UNSIGNED_INT, nullptr, toDrawInThisDrawCall);
        drawn += toDrawInThisDrawCall;
    }
}
>>

setVaoAttribute(name, dataType, layout, instanceName) ::= <<
<! For nesting types could generate a function that takes the layout for each struct !>
<! It would probably take more time to write a system to automatically generate these than to just write the specific needed cases !>
<if(dataType.isFloat)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "1", instanceName, name)>
<elseif(dataType.isVec2)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "2", instanceName, name)>
<elseif(dataType.isVec3)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "3", instanceName, name)>
<elseif(dataType.isVec4)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "4", instanceName, name)>
<elseif(dataType.isMat3x2)><\\>
<setSingleVaoAttribute(layout, "0", "Float", "2", instanceName, name)>
<setSingleVaoAttribute(layout, "1", "Float", "2", instanceName, name)>
<setSingleVaoAttribute(layout, "2", "Float", "2", instanceName, name)>
<else><\\>
error
<endif>
>>

setSingleVaoAttribute(layout, layoutOffset, shaderDataType, shaderDataTypeCount, instanceName, name) ::= <<
Vao::setAttribute(<layout> + <layoutOffset>, BufferLayout(ShaderDataType::<shaderDataType>, <shaderDataTypeCount>, offsetof(<instanceName>, <name>) + sizeof(Vec<shaderDataTypeCount>) * <layoutOffset>, sizeof(<instanceName>), false));
glVertexAttribDivisor(<layout> + <layoutOffset>, 1);
>>